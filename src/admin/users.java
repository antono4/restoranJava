/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package admin;

import java.awt.Dimension;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import models.helperClass;
import models.mysql;

/**
 *
 * @author DELL
 */
public class users extends javax.swing.JFrame {
    private HashMap<Object, Integer> userGrant;
    private final mysql db;
    private final Statement stm;
    private ResultSet res;
    private boolean  doEdit = false;

    /**
     * Creates new form addMenu
     *
     * @throws java.sql.SQLException
     */
    public users() throws SQLException {
        initComponents();
        
        this.userGrant = new HashMap<Object, Integer>();
        this.userGrant.put("Kasir", 2);
        this.userGrant.put("Dapur", 3);
        
        this.db = new mysql();
        this.stm = mysql.getConnection().createStatement();

        setTitle("KELOLA USER");
        setPreferredSize(new Dimension(1280, 720));
        setResizable(false);
        setLocationRelativeTo(null);
 
        this.fillUserList();

        headerTitle.setVisible(false);
        nameAlert.setVisible(false);
        hpMsg.setVisible(false);
        editBtn.setVisible(false);
        delBtn.setVisible(false);
        editID.setVisible(false);
        usernameAlert.setVisible(false);
        passwordALert.setVisible(false);
        
        pack();
    }

    private void fillUserList() {
        try {
            DefaultTableModel list = (DefaultTableModel) userList.getModel();

            String getMenuList = "SELECT u.*, p.* FROM `users` `u` JOIN `userProfile` `p` ON u.userID = p.userID WHERE `userGrant` != '1'";
            this.res = this.stm.executeQuery(getMenuList);

            if (this.res.next()) {
                do {
                    int ID = this.res.getInt("userID");
                    String nama = this.res.getString("fullName");
                    String user = this.res.getString("username");
                    String hp = this.res.getString("phoneNumber");
                    int grant = this.res.getInt("userGrant");
                    String userGrant = (grant == 2) ? "Kasir" : "Dapur";

                    list.addRow(new Object[]{ID, user, nama, hp, userGrant});
                } while (this.res.next());
            }
        } catch (SQLException ex) {
            Logger.getLogger(users.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void updateTable() {
        try {
            DefaultTableModel list = (DefaultTableModel) userList.getModel();
            list.setRowCount(0);

            String getUsers = "SELECT u.*, p.* FROM `users` `u` JOIN `userProfile` `p` ON u.userID = p.userID WHERE `userGrant` != '1'";
            this.res = this.stm.executeQuery(getUsers);

            if (this.res.next()) {
                do {
                    int ID = this.res.getInt("userID");
                    String user = this.res.getString("username");
                    String nama = this.res.getString("fullName");
                    String hp = this.res.getString("phoneNumber");
                    int grant = this.res.getInt("userGrant");
                    String userGrant = (grant == 2) ? "Kasir" : "Dapur";

                    list.addRow(new Object[]{ID, user, nama, hp, userGrant});
                } while (this.res.next());
            }
        } catch (SQLException ex) {
            Logger.getLogger(users.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        menuPanel = new javax.swing.JScrollPane();
        userList = new javax.swing.JTable();
        backBtn = new javax.swing.JLabel();
        editID = new javax.swing.JLabel();
        inputNama = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        nameAlert = new javax.swing.JLabel();
        inputHP = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        hpMsg = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        usernameAlert = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        passwordALert = new javax.swing.JLabel();
        headerTitle = new javax.swing.JLabel();
        addBtn = new javax.swing.JButton();
        editBtn = new javax.swing.JButton();
        delBtn = new javax.swing.JButton();
        usernameField = new javax.swing.JTextField();
        passwordField = new javax.swing.JPasswordField();
        selectGrant = new javax.swing.JComboBox();
        editPanel = new javax.swing.JLabel();
        bg = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        userList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Username", "Nama", "No. HP", "Hak Akses"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, false, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        userList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                userListMouseClicked(evt);
            }
        });
        menuPanel.setViewportView(userList);
        if (userList.getColumnModel().getColumnCount() > 0) {
            userList.getColumnModel().getColumn(4).setResizable(false);
        }

        getContentPane().add(menuPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 200, 540, 380));

        backBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/icon/back.png"))); // NOI18N
        backBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                backBtnMouseClicked(evt);
            }
        });
        getContentPane().add(backBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        editID.setText("{{editID}}");
        getContentPane().add(editID, new org.netbeans.lib.awtextra.AbsoluteConstraints(860, 210, -1, -1));
        getContentPane().add(inputNama, new org.netbeans.lib.awtextra.AbsoluteConstraints(920, 270, 220, -1));

        jLabel2.setText("Nama");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(820, 270, -1, 20));

        nameAlert.setText("{{namaMsg}}");
        getContentPane().add(nameAlert, new org.netbeans.lib.awtextra.AbsoluteConstraints(990, 290, -1, -1));

        inputHP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputHPActionPerformed(evt);
            }
        });
        getContentPane().add(inputHP, new org.netbeans.lib.awtextra.AbsoluteConstraints(920, 310, 220, -1));

        jLabel4.setText("No. HP");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(820, 314, -1, 20));

        hpMsg.setText("{{hpAlert}}");
        getContentPane().add(hpMsg, new org.netbeans.lib.awtextra.AbsoluteConstraints(990, 330, -1, -1));

        jLabel6.setText("Hak akses:");
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(820, 360, -1, 20));

        jLabel3.setText("Username:");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(820, 394, -1, 20));

        usernameAlert.setText("{{usernameAlert}}");
        getContentPane().add(usernameAlert, new org.netbeans.lib.awtextra.AbsoluteConstraints(990, 410, -1, 20));

        jLabel7.setText("Password:");
        getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(820, 430, -1, 20));

        passwordALert.setText("{{passwordField}}");
        getContentPane().add(passwordALert, new org.netbeans.lib.awtextra.AbsoluteConstraints(980, 450, -1, -1));

        headerTitle.setText("{{msg}}");
        getContentPane().add(headerTitle, new org.netbeans.lib.awtextra.AbsoluteConstraints(970, 230, -1, -1));

        addBtn.setText("Tambah");
        addBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBtnActionPerformed(evt);
            }
        });
        getContentPane().add(addBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(1070, 490, -1, -1));

        editBtn.setText("Edit");
        editBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editBtnActionPerformed(evt);
            }
        });
        getContentPane().add(editBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(1010, 490, -1, -1));

        delBtn.setText("Hapus");
        delBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delBtnActionPerformed(evt);
            }
        });
        getContentPane().add(delBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(940, 490, -1, -1));
        getContentPane().add(usernameField, new org.netbeans.lib.awtextra.AbsoluteConstraints(920, 390, 220, -1));
        getContentPane().add(passwordField, new org.netbeans.lib.awtextra.AbsoluteConstraints(920, 430, 220, -1));

        selectGrant.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Kasir", "Dapur" }));
        selectGrant.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectGrantActionPerformed(evt);
            }
        });
        getContentPane().add(selectGrant, new org.netbeans.lib.awtextra.AbsoluteConstraints(920, 360, 220, -1));

        editPanel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/background/admin/USERS AD.png"))); // NOI18N
        getContentPane().add(editPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 200, -1, -1));

        bg.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/background/admin/USERS.png"))); // NOI18N
        getContentPane().add(bg, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1280, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBtnActionPerformed
        if(this.doEdit) {
            inputNama.setText("");
            inputHP.setText("");
            editID.setText("");
            usernameField.setText("");
            usernameField.setText("");
            passwordField.setText("");
            selectGrant.setSelectedIndex(0);
            addBtn.setText("TAMBAH");
            
            editBtn.setVisible(false);
            delBtn.setVisible(false);
            
            this.doEdit = false;
        }
        else {
        try {
            String nama = inputNama.getText();
            String hp = inputHP.getText();
            String username = usernameField.getText();
            String password = passwordField.getText();
            Object grant = selectGrant.getSelectedItem();
            Integer userGrant = this.userGrant.get((String) grant);

            if (nama.equals("")) {
                inputNama.requestFocus();
                nameAlert.setText("Masukkan nama user!");
                nameAlert.setVisible(true);
            }
            else {
                nameAlert.setVisible(false);
            }
            if (hp.equals("")) {
                inputHP.requestFocus();
                hpMsg.setText("Masukkan No. HP user!");
                hpMsg.setVisible(true);
            }
            else {
                hpMsg.setVisible(false);
            }
            if(username.equals("")) {
                usernameField.requestFocus();
                usernameAlert.setText("Masukkan username!");
                usernameAlert.setVisible(true);
            }
            else {
                usernameAlert.setVisible(false);
            }
            if(password.equals("")) {
                passwordALert.setText("Masukkan password!");
                passwordALert.setVisible(true);
            }
            else {
                passwordALert.setVisible(false);
            }

            if (!nama.equals("") && !hp.equals("") && !username.equals("") && !password.equals("")) {
                String cekUsername = "SELECT * FROM users WHERE username = '"+ username +"'";
                this.res = this.stm.executeQuery(cekUsername);
                
                if(this.res.next()) {
                    usernameAlert.setText("Username "+ username +" sudah terdaftar!");
                    usernameAlert.setVisible(true);
                }
                else {
                    usernameAlert.setVisible(false);
                    
                    String pass = helperClass.getMD5(password);
                    String insertUser = "INSERT INTO `users` VALUES (NULL, '"+ username +"', '"+ pass +"', '"+ userGrant +"')";
                    PreparedStatement pstmt = mysql.getConnection().prepareStatement(insertUser, Statement.RETURN_GENERATED_KEYS);
                    int insert = pstmt.executeUpdate();

                    ResultSet gK = pstmt.getGeneratedKeys();
                    if(gK.next()) {
                        int userID = gK.getInt(1);
                        
                        String insertProfile = "INSERT INTO userProfile VALUES (NULL, '"+ userID +"', '"+ nama +"', '"+ hp +"')";
                        int Insert = this.stm.executeUpdate(insertProfile);
                        if(Insert > 0) {
                            this.updateTable();
                            
                            headerTitle.setText("User baru berhasil ditambahkan");
                            headerTitle.setVisible(true);
                            
                            inputNama.setText("");
                            inputHP.setText("");
                            usernameField.setText("");
                            passwordField.setText("");
                        }
                        
                    }
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(users.class.getName()).log(Level.SEVERE, null, ex);
        }
        }
    }//GEN-LAST:event_addBtnActionPerformed

    private void userListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_userListMouseClicked
        try {
            this.doEdit = true;
            DefaultTableModel list = (DefaultTableModel) userList.getModel();
            int sel = userList.getSelectedRow();
            String id = list.getValueAt(sel, 0).toString();
            int ID = Integer.parseInt(id);

            addBtn.setText("BATAL");
            editBtn.setVisible(true);
            delBtn.setVisible(true);

            String getData = "SELECT u.*, p.* FROM `users` `u` JOIN `userProfile` `p` ON u.userID = p.userID WHERE `userGrant` != '1' AND u.userID = '"+ ID +"'";
            this.res = this.stm.executeQuery(getData);
            if (this.res.next()) {
                int userID = this.res.getInt("userID");
                String user = this.res.getString("username");
                String nama = this.res.getString("fullName");
                String hp = this.res.getString("phoneNumber");
                int grant = this.res.getInt("userGrant");
                String userGrant = (grant == 2) ? "Kasir" : "Dapur";

                inputNama.setText(nama);
                inputHP.setText(hp);
                editID.setText(String.valueOf(userID));
                usernameField.setText(user);

                selectGrant.setSelectedItem(userGrant);
            }
        } catch (SQLException ex) {
            Logger.getLogger(users.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_userListMouseClicked

    private void inputHPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputHPActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_inputHPActionPerformed

    private void delBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delBtnActionPerformed
        DefaultTableModel list = (DefaultTableModel) userList.getModel();
        int doHapus = JOptionPane.showConfirmDialog(editPanel, (Object) "Yakin ingin menghapus user ini?", "Hapus user", 0);
        String userID = editID.getText();

        if (doHapus == 0) {
            try {
                String ID = editID.getText();
                String Hapus = "DELETE FROM `users` WHERE `userID` = '" + userID + "'";
                int hapus = this.stm.executeUpdate(Hapus);
                int hapusProfile = this.stm.executeUpdate("DELETE FROM `userProfile` WHERE `userID` = '"+ userID +"'");

                if (hapus > 0 && hapusProfile > 0) {
                    headerTitle.setText("User berhasil dihapus");
                    headerTitle.setVisible(true);

                    inputHP.setText("");
                    inputNama.setText("");
                    selectGrant.setSelectedIndex(0);

                    this.updateTable();
                    addBtn.setVisible(true);
                    delBtn.setVisible(false);
                    editBtn.setVisible(false);
                }
            } catch (SQLException ex) {
                Logger.getLogger(users.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_delBtnActionPerformed

    private void editBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editBtnActionPerformed
        try {
            String uID = editID.getText();
            String nama = inputNama.getText();
            String hp = inputHP.getText();
            String username = usernameField.getText();
            String password = passwordField.getText();
            Object grant = selectGrant.getSelectedItem();
            Integer userGrant = this.userGrant.get((String) grant);

            if (nama.equals("")) {
                inputNama.requestFocus();
                nameAlert.setText("Masukkan nama user!");
                nameAlert.setVisible(true);
            }
            else {
                nameAlert.setVisible(false);
            }
            if (hp.equals("")) {
                inputHP.requestFocus();
                hpMsg.setText("Masukkan No. HP user!");
                hpMsg.setVisible(true);
            }
            else {
                hpMsg.setVisible(false);
            }
            
            if (!nama.equals("") && !hp.equals("")) {
                String updateProfile = "UPDATE `userProfile` SET `fullName` = '"+ nama +"', `phoneNumber` = '"+ hp +"' WHERE `userID` = '"+ uID +"'";
                int updateUserProfile = this.stm.executeUpdate(updateProfile);
                int updateUserName = 0;
                int updateUserPassword = 0;
                
                if( ! username.equals("")) {
                    updateUserName = this.stm.executeUpdate("UPDATE `users` SET `username` = '"+ username +"' WHERE `userID` = '"+ uID +"'");
                }
                if( ! password.equals("")) {
                    updateUserPassword = this.stm.executeUpdate("UPDATE `users` SET `password` = '"+ password +"' WHERE `userID` = '"+ uID +"'");
                }
                
                if(updateUserProfile > 0 || updateUserName > 0 || updateUserPassword > 0) {
                    this.updateTable();
                    
                    headerTitle.setText("Data user "+ nama +" berhasil diperbarui");
                    headerTitle.setVisible(true);

                    inputHP.setText("");
                    inputNama.setText("");
                    selectGrant.setSelectedIndex(0);
                    usernameField.setText("");
                    passwordField.setText("");

                    this.updateTable();
                    addBtn.setVisible(true);
                    delBtn.setVisible(false);
                    editBtn.setVisible(false);
                }
                else {
                    headerTitle.setText("Terjadi kesalahan saat memperbarui data. Silahkan ulangi kembali");
                    headerTitle.setVisible(true);
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(users.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_editBtnActionPerformed

    private void backBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_backBtnMouseClicked
        try {
            new admin().setVisible(true);
            this.dispose();
        } catch (SQLException ex) {
            Logger.getLogger(users.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_backBtnMouseClicked

    private void selectGrantActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectGrantActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_selectGrantActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(users.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(users.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(users.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(users.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                try {
                    new users().setVisible(true);
                } catch (SQLException ex) {
                    Logger.getLogger(users.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addBtn;
    private javax.swing.JLabel backBtn;
    private javax.swing.JLabel bg;
    private javax.swing.JButton delBtn;
    private javax.swing.JButton editBtn;
    private javax.swing.JLabel editID;
    private javax.swing.JLabel editPanel;
    private javax.swing.JLabel headerTitle;
    private javax.swing.JLabel hpMsg;
    private javax.swing.JTextField inputHP;
    private javax.swing.JTextField inputNama;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane menuPanel;
    private javax.swing.JLabel nameAlert;
    private javax.swing.JLabel passwordALert;
    private javax.swing.JPasswordField passwordField;
    private javax.swing.JComboBox selectGrant;
    private javax.swing.JTable userList;
    private javax.swing.JLabel usernameAlert;
    private javax.swing.JTextField usernameField;
    // End of variables declaration//GEN-END:variables
}
