/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package admin;

import java.awt.Dimension;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import models.mysql;

/**
 *
 * @author DELL
 */
public class addKategori extends javax.swing.JFrame {
    private boolean editKategori = false;
    private final mysql db;
    private final Statement stm;
    private ResultSet res;
    private final HashMap<String, Integer> idKategori;

    /**
     * Creates new form addMenu
     *
     * @throws java.sql.SQLException
     */
    public addKategori() throws SQLException {
        initComponents();
        
        this.db = new mysql();
        this.stm = mysql.getConnection().createStatement();
        this.idKategori = new HashMap<String, Integer>();

        setTitle("KELOLA KATEGORI");
        setPreferredSize(new Dimension(500, 800));
        setResizable(false);
        setLocationRelativeTo(null);
        
        this.updateTable();
        
        headerTitle.setVisible(false);
        nameAlert.setVisible(false);
        editBtn.setVisible(false);
        delBtn.setVisible(false);
        editID.setVisible(false);

        pack();
    }

    private void fillKategoriList() {
        try {
            DefaultTableModel list = (DefaultTableModel) kategoriList.getModel();

            String getMenuList = "SELECT * FROM `foodCategory` ORDER BY `categoryName` ASC";
            this.res = this.stm.executeQuery(getMenuList);

            if (this.res.next()) {
                do {
                    int ID = this.res.getInt("categoryID");
                    String nama = this.res.getString("categoryName");

                    list.addRow(new Object[]{ID, nama});
                } while (this.res.next());
            }
        } catch (SQLException ex) {
            Logger.getLogger(addKategori.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void updateTable() {
        try {
            DefaultTableModel list = (DefaultTableModel) kategoriList.getModel();
            list.setRowCount(0);

            String getMenuList = "SELECT * FROM `foodCategory` ORDER BY `categoryName` ASC";
            this.res = this.stm.executeQuery(getMenuList);

            if (this.res.next()) {
                do {
                    int ID = this.res.getInt("categoryID");
                    String nama = this.res.getString("categoryName");

                    list.addRow(new Object[]{ID, nama});
                } while (this.res.next());
            }
        } catch (SQLException ex) {
            Logger.getLogger(addKategori.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        menuPanel = new javax.swing.JScrollPane();
        kategoriList = new javax.swing.JTable();
        editPanel = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        inputNama = new javax.swing.JTextField();
        nameAlert = new javax.swing.JLabel();
        addBtn = new javax.swing.JButton();
        headerTitle = new javax.swing.JLabel();
        editBtn = new javax.swing.JButton();
        delBtn = new javax.swing.JButton();
        editID = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        backBtn = new javax.swing.JLabel();
        bg = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Tambahkan Kategori Menu");
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        kategoriList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Nama"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        kategoriList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                kategoriListMouseClicked(evt);
            }
        });
        menuPanel.setViewportView(kategoriList);
        if (kategoriList.getColumnModel().getColumnCount() > 0) {
            kategoriList.getColumnModel().getColumn(0).setMaxWidth(30);
        }

        getContentPane().add(menuPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 130, 290, 330));

        jLabel2.setText("Nama:");

        inputNama.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputNamaActionPerformed(evt);
            }
        });

        nameAlert.setText("{{namaMsg}}");

        addBtn.setText("Tambah");
        addBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBtnActionPerformed(evt);
            }
        });

        headerTitle.setText("{{msg}}");

        editBtn.setText("Edit");
        editBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editBtnActionPerformed(evt);
            }
        });

        delBtn.setText("Hapus");
        delBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delBtnActionPerformed(evt);
            }
        });

        editID.setText("{{editID}}");

        jLabel1.setFont(new java.awt.Font("Kristen ITC", 1, 12)); // NOI18N
        jLabel1.setText("TAMBAH KATEGORI BARU");

        javax.swing.GroupLayout editPanelLayout = new javax.swing.GroupLayout(editPanel);
        editPanel.setLayout(editPanelLayout);
        editPanelLayout.setHorizontalGroup(
            editPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(editPanelLayout.createSequentialGroup()
                .addGroup(editPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, editPanelLayout.createSequentialGroup()
                        .addGap(41, 41, 41)
                        .addComponent(jLabel2))
                    .addGroup(editPanelLayout.createSequentialGroup()
                        .addGroup(editPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(editPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(editPanelLayout.createSequentialGroup()
                                    .addContainerGap()
                                    .addComponent(editID))
                                .addGroup(editPanelLayout.createSequentialGroup()
                                    .addGap(98, 98, 98)
                                    .addComponent(jLabel1))
                                .addGroup(editPanelLayout.createSequentialGroup()
                                    .addGap(159, 159, 159)
                                    .addComponent(headerTitle)))
                            .addGroup(editPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(editPanelLayout.createSequentialGroup()
                                    .addComponent(delBtn)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(editBtn)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(addBtn))
                                .addComponent(inputNama, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(26, 26, 26)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, editPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(nameAlert)
                .addGap(129, 129, 129))
        );
        editPanelLayout.setVerticalGroup(
            editPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(editPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(editPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(editID)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(headerTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(editPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(inputNama, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(nameAlert)
                .addGap(18, 18, 18)
                .addGroup(editPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addBtn)
                    .addComponent(editBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(delBtn))
                .addContainerGap(55, Short.MAX_VALUE))
        );

        getContentPane().add(editPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 470, 330, 200));

        backBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/icon/back.png"))); // NOI18N
        backBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                backBtnMouseClicked(evt);
            }
        });
        getContentPane().add(backBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        bg.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/background/admin/KATEGORI ADD.png"))); // NOI18N
        getContentPane().add(bg, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBtnActionPerformed
        if(this.editKategori) {
            addBtn.setText("Tambah");
            inputNama.setText("");
            this.editKategori = false;
            
            editBtn.setVisible(false);
            delBtn.setVisible(false);
        }
        else {
        try {
            String nama = inputNama.getText();

            if (nama.equals("")) {
                inputNama.requestFocus();
                nameAlert.setText("Masukkan nama kategori");
                nameAlert.setVisible(true);
            } else {
                String tambahMenu = "INSERT INTO `foodCategory` VALUES (NULL, '" + nama + "')";
                int tambah = this.stm.executeUpdate(tambahMenu);

                if (tambah > 0) {
                    inputNama.setText("");

                    headerTitle.setText("Kategori baru ditambahkan!");
                    this.updateTable();
                } else {
                    headerTitle.setText("Terjadi kesalahan saat menambahkan kategori. Silahkan ulangi kembali.");
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(addKategori.class.getName()).log(Level.SEVERE, null, ex);
        }
        }
    }//GEN-LAST:event_addBtnActionPerformed

    private void kategoriListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_kategoriListMouseClicked
        try {
            this.editKategori = true;
            addBtn.setText("Batal");
            DefaultTableModel list = (DefaultTableModel) kategoriList.getModel();
            int sel = kategoriList.getSelectedRow();
            String id = list.getValueAt(sel, 0).toString();
            int ID = Integer.parseInt(id);

            editBtn.setVisible(true);
            delBtn.setVisible(true);

            String getData = "SELECT * FROM `foodCategory` WHERE `categoryID` = '" + ID + "'";
            this.res = this.stm.executeQuery(getData);
            if (this.res.next()) {
                String nama = this.res.getString("categoryName");

                inputNama.setText(nama);
                editID.setText(String.valueOf(ID));
            }
        } catch (SQLException ex) {
            Logger.getLogger(addKategori.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_kategoriListMouseClicked

    private void delBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delBtnActionPerformed
        DefaultTableModel list = (DefaultTableModel) kategoriList.getModel();
        int doHapus = JOptionPane.showConfirmDialog(editPanel, (Object) "Yakin ingin menghapus kategori ini?", "Hapus kategori", 0);

        if (doHapus == 0) {
            try {
                String ID = editID.getText();
                String Hapus = "DELETE FROM `foodCategory` WHERE `categoryID` = '" + ID + "'";
                int hapus = this.stm.executeUpdate(Hapus);

                if (hapus > 0) {
                    headerTitle.setText("Kategori berhasil dihapus");
                    headerTitle.setVisible(true);

                    inputNama.setText("");

                    this.updateTable();
                    addBtn.setVisible(true);
                    delBtn.setVisible(false);
                    editBtn.setVisible(false);
                }
            } catch (SQLException ex) {
                Logger.getLogger(addKategori.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            if(this.editKategori) {
                addBtn.setText("Tambah");
                this.editKategori = false;
            }
        }
    }//GEN-LAST:event_delBtnActionPerformed

    private void editBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editBtnActionPerformed
        DefaultTableModel list = (DefaultTableModel) kategoriList.getModel();
        String ID = editID.getText();

        String nama = inputNama.getText();

        if (nama.equals("")) {
            inputNama.requestFocus();
            nameAlert.setText("Masukkan nama kategori!");
            nameAlert.setVisible(true);
        }
        else {
            if(this.editKategori) {
                addBtn.setText("Tambah");
                this.editKategori = false;
            }
            nameAlert.setVisible(false);
            try {
                String update = "UPDATE `foodCategory` SET `categoryName` = '" + nama + "' WHERE `categoryID` = '" + ID + "'";
                int updateMenu = this.stm.executeUpdate(update);

                if (updateMenu > 0) {
                    headerTitle.setText("Kategori diperbarui!");
                    headerTitle.setVisible(true);

                    this.updateTable();
                } else {
                    headerTitle.setText("Gagal memperbarui menu. Harap ulangi kembali");
                    headerTitle.setVisible(true);
                }

                inputNama.setText("");

                addBtn.setVisible(true);
                editBtn.setVisible(false);
                delBtn.setVisible(false);
            } catch (SQLException ex) {
                Logger.getLogger(addKategori.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_editBtnActionPerformed

    private void backBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_backBtnMouseClicked
        try {
            new admin().setVisible(true);
            this.dispose();
        } catch (SQLException ex) {
            Logger.getLogger(addKategori.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_backBtnMouseClicked

    private void inputNamaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputNamaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_inputNamaActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(addKategori.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(addKategori.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(addKategori.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(addKategori.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                try {
                    new addKategori().setVisible(true);
                } catch (SQLException ex) {
                    Logger.getLogger(addKategori.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addBtn;
    private javax.swing.JLabel backBtn;
    private javax.swing.JLabel bg;
    private javax.swing.JButton delBtn;
    private javax.swing.JButton editBtn;
    private javax.swing.JLabel editID;
    private javax.swing.JPanel editPanel;
    private javax.swing.JLabel headerTitle;
    private javax.swing.JTextField inputNama;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JTable kategoriList;
    private javax.swing.JScrollPane menuPanel;
    private javax.swing.JLabel nameAlert;
    // End of variables declaration//GEN-END:variables
}
