/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package kasir;

import java.awt.Dimension;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import models.helperClass;
import models.mysql;

/**
 *
 * @author DELL
 */
public class viewOrder extends javax.swing.JFrame {
    private mysql db;
    private Statement stm;
    private ResultSet res;
    private int orderID;

    /**
     * Creates new form lihatOrder
     * @param orderID
     */
    public viewOrder(int orderID) throws SQLException {
        initComponents();
        
        this.db = new mysql();
        this.stm = mysql.getConnection().createStatement();
        
        String ordID;
        if(orderID == 0) {
            ordID = "{{restrictedAccess}}";
        }
        else {
            String getData = "SELECT orderNumber FROM orders WHERE orderID = '"+ orderID +"'";
            this.res = this.stm.executeQuery(getData);
            if(this.res.next()) {
                ordID = this.res.getString("orderNumber");
                this.fillData(orderID);
                this.orderID = orderID;
            }
            else {
                ordID = "{{failedToCallDatabase}}";
            }
        }
        
        setTitle("ORDER #"+ ordID);
        setPreferredSize(new Dimension(500, 800));
        setResizable(false);
        setLocationRelativeTo(null);
        
        orderTitle.setText("Order #"+ ordID);
        
        pack();
    }
    
    private void fillData(int ID) {
        try {
            DefaultTableModel model = (DefaultTableModel) orderItems.getModel();

            String getOrderData = "SELECT * FROM `orders` WHERE `orderID` = '" + ID + "'";
            this.res = this.stm.executeQuery(getOrderData);
           if (this.res.next()) {
                String num = this.res.getString("orderNumber");
                String date = this.res.getString("orderTime");
                String qty = this.res.getString("orderQuantity");
                Double price = this.res.getDouble("totalPrice");
                boolean status = this.res.getBoolean("status");
                boolean paid = this.res.getBoolean("isPaid");

                String totalHarga = helperClass.formatRupiah(price);
                
                String ordStatus = (status) ? "Selesai" : "Dalam antrian";
                String paidStatus = (paid) ? "Sudah dibayar" : "Belum dibayar";
                
                orderStatus.setText(ordStatus);
                payStatus.setText(paidStatus);
                orderPrice.setText(totalHarga);
                orderQty.setText(qty);
            }

            String getItems = "SELECT o.orderID, f.name, i.foodID, i.orderQuantity as qty, i.priceEach as price FROM orders o JOIN orderItems i ON i.orderID = o.orderID JOIN foods f ON f.foodID = i.foodID WHERE o.orderID = '" + ID + "'";
            this.res = this.stm.executeQuery(getItems);

            if (this.res.next()) {
                do {
                    int foodID = this.res.getInt("foodID");
                    String nama = this.res.getString("name");
                    int qty = this.res.getInt("qty");
                    Double price = this.res.getDouble("price");
                    Double subtotal = (price * qty);

                    model.addRow(new Object[]{foodID, nama, helperClass.formatRupiah(price), qty, helperClass.formatRupiah(subtotal)});
                } while (this.res.next());
            }
        } catch (SQLException ex) {
            Logger.getLogger(viewOrder.class.getName()).log(Level.SEVERE, null, ex);
        }
    }                                            

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        backLink = new javax.swing.JLabel();
        listOrder = new javax.swing.JLabel();
        orderTitle = new javax.swing.JLabel();
        orderPrice = new javax.swing.JTextField();
        orderQty = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        payPanel = new javax.swing.JScrollPane();
        orderItems = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        orderStatus = new javax.swing.JLabel();
        payStatus = new javax.swing.JLabel();
        payBtn = new javax.swing.JButton();
        delBtn = new javax.swing.JButton();
        bg = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        backLink.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/icon/back.png"))); // NOI18N
        backLink.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        backLink.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                backLinkMouseClicked(evt);
            }
        });
        getContentPane().add(backLink, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 30, -1));

        listOrder.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/icon/list.png"))); // NOI18N
        listOrder.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        listOrder.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listOrderMouseClicked(evt);
            }
        });
        getContentPane().add(listOrder, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 0, 30, -1));

        orderTitle.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        orderTitle.setText("Order #AA0000");
        getContentPane().add(orderTitle, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 150, -1, -1));

        orderPrice.setEditable(false);
        getContentPane().add(orderPrice, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 470, 90, -1));

        orderQty.setEditable(false);
        getContentPane().add(orderQty, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 470, 90, -1));

        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Jumlah:");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 470, -1, 20));

        orderItems.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Nama", "Harga satuan", "Jumlah beli", "Total harga"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        payPanel.setViewportView(orderItems);

        getContentPane().add(payPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 270, -1, 200));

        jLabel5.setText("Status proses:");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 220, -1, -1));

        jLabel6.setText("Status bayar:");
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 240, -1, -1));

        orderStatus.setForeground(new java.awt.Color(255, 255, 255));
        orderStatus.setText("false");
        getContentPane().add(orderStatus, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 220, -1, -1));

        payStatus.setForeground(new java.awt.Color(255, 255, 255));
        payStatus.setText("false");
        getContentPane().add(payStatus, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 240, -1, -1));

        payBtn.setText("BAYAR");
        payBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                payBtnActionPerformed(evt);
            }
        });
        getContentPane().add(payBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 510, -1, -1));

        delBtn.setText("HAPUS");
        delBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delBtnActionPerformed(evt);
            }
        });
        getContentPane().add(delBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 510, -1, -1));

        bg.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/background/kasir/view order.png"))); // NOI18N
        getContentPane().add(bg, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void backLinkMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_backLinkMouseClicked
        try {
            new kasir().setVisible(true);
            this.dispose();
        } catch (SQLException ex) {
            Logger.getLogger(viewOrder.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_backLinkMouseClicked

    private void listOrderMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listOrderMouseClicked
        try {
            new orderLists().setVisible(true);
            this.dispose();
        } catch (SQLException ex) {
            Logger.getLogger(viewOrder.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_listOrderMouseClicked

    private void payBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_payBtnActionPerformed
        int ID = this.orderID;
        
        if(ID > 0) {
            int doPay = JOptionPane.showConfirmDialog(payPanel, (Object) "Tandai order ini sebagai sudah dibayar?", "Bayar order", 0);
            if (doPay == 0) {
                try {
                    String pay = "UPDATE `orders` SET `isPaid` = '1' WHERE `orderID` = '" + ID + "'";
                    int bayar = this.stm.executeUpdate(pay);
                    if (bayar > 0) {
                        JOptionPane.showMessageDialog(payPanel, "Order dibayar!");
                        payBtn.setVisible(false);
                        payStatus.setText("Sudah dibayar");
                    }
                    else {
                         JOptionPane.showMessageDialog(payPanel, "Terjadi kesalahan. Harap ulangi kembali.");
                    }
                }
                catch (SQLException ex) {
                    Logger.getLogger(orderLists.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        else {
             JOptionPane.showMessageDialog(payPanel, "Tidak ada order");
        }
    }//GEN-LAST:event_payBtnActionPerformed

    private void delBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delBtnActionPerformed
        int ID = this.orderID;
        
        if(ID > 0) {
            int doHapus = JOptionPane.showConfirmDialog(payPanel, (Object) "Yakin ingin menghapus order ini?", "Hapus Order", 0);
            if (doHapus == 0) {
                try {
                    String delete = "DELETE FROM `orders` WHERE `orderID` = '" + ID + "'";
                    int hapus = this.stm.executeUpdate(delete);
                    int hps = this.stm.executeUpdate("DELETE FROM `orderItems` WHERE `orderID` = '" + ID + "'");
                    if (hapus > 0 && hps > 0) {
                        JOptionPane.showMessageDialog(payPanel, "Order berhasil dihapus!");
                        new orderLists().setVisible(true);
                        this.dispose();
                    }
                    else {
                        JOptionPane.showMessageDialog(payPanel, "Gagal menghapus order");
                    }
                }
                catch (SQLException ex) {
                    Logger.getLogger(orderLists.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        else {
            JOptionPane.showMessageDialog(payPanel, "Tidak ada order!");
        }
    }//GEN-LAST:event_delBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(viewOrder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(viewOrder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(viewOrder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(viewOrder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new viewOrder(0).setVisible(true);
                } catch (SQLException ex) {
                    Logger.getLogger(viewOrder.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel backLink;
    private javax.swing.JLabel bg;
    private javax.swing.JButton delBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel listOrder;
    private javax.swing.JTable orderItems;
    private javax.swing.JTextField orderPrice;
    private javax.swing.JTextField orderQty;
    private javax.swing.JLabel orderStatus;
    private javax.swing.JLabel orderTitle;
    private javax.swing.JButton payBtn;
    private javax.swing.JScrollPane payPanel;
    private javax.swing.JLabel payStatus;
    // End of variables declaration//GEN-END:variables
}
